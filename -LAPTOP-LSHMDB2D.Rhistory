axis.title.x = element_text(vjust = -0.2,colour = "black"),
axis.text = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
# panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = margin(0, 0, 0, 0, unit = "cm"),
legend.title = element_blank(),
plot.margin=unit(c(10,5,5,5),"mm"),
### Subtitle
plot.subtitle=element_text(size = sub_text, hjust=0.5, face="italic", color="#8B8B8B"),
### Caption
plot.caption=element_text(size = caption_text, hjust=0.5, face="italic", color="#8B8B8B"),
strip.background=element_rect(colour="#FAECEC",fill="#FAECEC"),
strip.text = element_text(face="bold"))
}
### --------------
# levels
### -------------
vari <- unique(na.omit(df$variable))
df$nvl_label <- str_replace_all(df$nvl_label,vari, " ")
df$nvl_label <- str_replace_all(df$nvl_label, "[[:punct:]]", " ")
### --------------
# Progress
### -------------
print(glue("Graficando {unique(df$var_etiqueta)[1]} - Mapas"))
### --------------
# Percentiles
### -------------
# Split data in percentiles
classes <- 5
q1 <- quantile(df$value, na.rm=T, probs = seq(0, 1, length.out = classes + 1))
df$q_value <- cut(df$value, breaks = q1, include.lowest = T, dig.lab = 2)
table(df$q_value)
# Keep labels only for polygons with data
df$nvl_label[is.na(df$value)] <- NA
### --------------
# Map
### -------------
# Plot polygons with no data
poly_na <- df %>% dplyr::filter(is.na(value))
if(nrow(poly_na) != 0){
poly_na <- poly_na %>% dplyr::distinct(nvl_value, .keep_all = T)
poly_min <- poly_na
poly_min$time <- min_year
poly_max <- poly_na
poly_max$time <- max_year
poly_na <- bind_rows(poly_min, poly_max)
data <- df %>% drop_na(value) %>% bind_rows(., poly_na)
} else {
data <- df
}
# Drop San Andres
data <- data[data$nvl_value != 88,]
# map_cont1 <- c("#C5DCFF", "#A1B8DC", "#7E96B8", "#5D7495", "#3D5574")
# map_cont2 <- c("#74AC54", "#3AA367", "#00977B", "#00898B", "#007A94", "#006993")
# map_cont3 <- c("#FAECEC", "#D7C6CC", "#B0A3AF", "#878293", "#5B6477", "#2F4858")
# Map: first and last year
graph <- ggplot(data = data) +
geom_sf(aes(fill = q_value), color = "#2b2b2b", size = 0.1, alpha = 0.7) +
geom_text(aes(X, Y, label = nvl_label), vjust = 1.5, color = "black",
position = position_dodge(0.9), size = map_text) +
scale_fill_manual(values =  rep(col_palette, 40), na.value = "#ededed", na.translate = F) +
guides(fill = guide_legend(ncol = 6)) +
xlab("") +
labs(title = tl, caption=cap) +
theme_Publication() +
facet_grid(~time)
# Grafica
plot(graph)
return(graph)
}
}
pulso_map(300, "print")
pulso_map <- function(id, type_p, col_palette){
require(sf)
require(glue)
require(colorspace)
require(stringr)
require(stringi)
require(tidyverse)
options(scipen = 999)
# Font sizes
caption_text <- 6*1.5
sub_text <- 6*1.5
theme_size <- 11
text_size <- 11*1.5
map_text <- 1.5
#### Choose variable
df <- ds_pulso[ds_pulso$var_id == id,]
# We dont have data for 2020 in GEIH income
geih <- ds_pulso %>%
dplyr::filter(id_data == 1 & str_detect(variable, "ing")) %>%
dplyr::select(variable) %>% distinct()
df$value[df$value == 0 & df$time == 2020 & df$id_data == 1 & df$variable %in% geih$variable] <- NA
l <- unique(df$id_nivel)
# Check territorial division
if(str_detect("dpto", unique(df$id_nivel), negate = T)){
print(paste0("No se recomienda esta funcion: Datos no estan a nivel departamental - el nivel es: ",l))
} else {
## If missing
if(missing(type_p)) {
type_p=""
}
## If palette is missing, use default colors
if(missing(col_palette)){
col_palette <- c("#FAECEC", "#D7C6CC", "#B0A3AF", "#878293", "#5B6477", "#2F4858")
}
# Identify first and last year in data
min_year <- min(df$time)
max_year <- max(df$time)
### Filter only first and last years
df <- df %>% dplyr::filter(time == min_year | time == max_year)
#### Check the elegibles
level <- unique(df$id_nivel)
no_ele <- ifelse(level %in% c("nacional","region","zona","area_metropolitana", "ciudad"), 1, 0)
### Nivel (minorities, gender, economic sector)
no_level <- ifelse(level %in% c("nacional","region","zona","area_metropolitana", "dpto", "ciudad"), 1, 0)
levels <- ifelse(level %in% c("dpto_etnia","dpto_gen","dpto_sector","nacional_etnia", "ciudad_etnia"), 1, 0)
### -----------------
### Fix labels
## ------------------
cod_vars <- cod_vars %>% ungroup() %>% select(-c( "var_id"))
df <- df %>% dplyr::left_join(cod_vars, by = c("id_data", "variable", "id_nivel"))
### Fix inflation in nominal variables
deflactor <- deflactor %>% dplyr::filter(time %in% df$time)
df <- df %>%
left_join(deflactor, by = "time") %>%
mutate(value = ifelse(var_unidad == "Pesos", value/deflactor_pib, value))
# Income and production to millions
df$value[df$var_unidad == "Pesos"] <- df$value/1000000
df$var_unidad[df$var_unidad == "Pesos"] <- "Millones de pesos (2015=100)"
tl <- ifelse(type_p=="print", unique(df$var_etiqueta),"")
s_tl <- ifelse(type_p=="print", paste0("Fuente: ",unique(df$db_nombre)),"")
cap <- ifelse(type_p=="print", paste0("Nota: ",unique(df$var_descripcion)),"")
print(tl)
tl <- str_wrap(tl, width = 30)
s_tl <- str_wrap(s_tl,width = 50)
cap <- str_wrap(cap,width = 100)
df$value_label <- stringr::str_wrap(df$var_unidad,width = 30)
### -----------------
# Fix levels
### ---------------
# Check if data has any gender/minority/other level and fix labels
if (levels==1) {
df <- df %>% dplyr::mutate(t=nvl_value) %>%
### Extract data
dplyr::mutate(nvl_value=sub("xxx.*", "",str_replace(t,"_"," xxx ")),
level=sub(".*xxx", "",str_replace(id_nivel,"_"," xxx ")),
level_value=as.numeric(sub(".*xxx", "",str_replace(t,"_"," xxx ")))) %>%
## Limpieza
dplyr::mutate(level=str_replace_all(level, " ", ""),
nvl_value=as.numeric(str_replace_all(nvl_value, " ", "")))
### Sexo y minorias etnicas
if(unique(df$level) == "gen") {
df$level_value <- factor(df$level_value,levels=c(1,2),labels = c("Hombre","Mujer"))
}
if(unique(df$level) == "etnia") {
df$level_value <- factor(df$level_value,levels=c(1,2),labels = c("Minoría","No minoría"))
}
if((unique(df$level) != "etnia") & (unique(df$level) != "gen")) {
df$level_value <- as.factor(df$level_value)
}
}
### -----------------
# Fix levels - Territory
### ---------------
# Join data with territorial shapefile
if(unique(df$id_nivel) %in% c("dpto","dpto_etnia","dpto_gen","dpto_sector")) {
df$nvl_value <- as.numeric(df$nvl_value)
map_dptos <- map_dptos %>% dplyr::rename(nvl_value = nivel_value)
df <- map_dptos %>%
dplyr::left_join(df %>% subset(time == min_year | time == max_year), by = "nvl_value") %>%
dplyr::select(-c(id_nivel.y)) %>%
dplyr::rename(id_nivel = id_nivel.x)
}
### -------------------
# Temas por default
### -------------------
s <- 1.2
a_line <- 0.6
theme_Publication <- function(base_size = theme_size, base_family="helvetica") {
theme(plot.title = element_text(face = "bold", size = rel(2), hjust = 0.5),
text=element_text(face = "bold", size = text_size, hjust = 0.5),
panel.background = element_blank(),
plot.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_blank(),
axis.title.x = element_text(vjust = -0.2,colour = "black"),
axis.text = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
# panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = margin(0, 0, 0, 0, unit = "cm"),
legend.title = element_blank(),
plot.margin=unit(c(10,5,5,5),"mm"),
### Subtitle
plot.subtitle=element_text(size = sub_text, hjust=0.5, face="italic", color="#8B8B8B"),
### Caption
plot.caption=element_text(size = caption_text, hjust=0.5, face="italic", color="#8B8B8B"),
strip.background=element_rect(colour="#FAECEC",fill="#FAECEC"),
strip.text = element_text(face="bold"))
}
### --------------
# levels
### -------------
vari <- unique(na.omit(df$variable))
df$nvl_label <- str_replace_all(df$nvl_label,vari, " ")
df$nvl_label <- str_replace_all(df$nvl_label, "[[:punct:]]", " ")
### --------------
# Progress
### -------------
print(glue("Graficando {unique(df$var_etiqueta)[1]} - Mapas"))
### --------------
# Percentiles
### -------------
# Split data in percentiles
classes <- 5
q1 <- quantile(df$value, na.rm=T, probs = seq(0, 1, length.out = classes + 1))
df$q_value <- cut(df$value, breaks = q1, include.lowest = T, dig.lab = 2)
table(df$q_value)
# Keep labels only for polygons with data
df$nvl_label[is.na(df$value)] <- NA
### --------------
# Map
### -------------
# Plot polygons with no data
poly_na <- df %>% dplyr::filter(is.na(value))
if(nrow(poly_na) != 0){
poly_na <- poly_na %>% dplyr::distinct(nvl_value, .keep_all = T)
poly_min <- poly_na
poly_min$time <- min_year
poly_max <- poly_na
poly_max$time <- max_year
poly_na <- bind_rows(poly_min, poly_max)
data <- df %>% drop_na(value) %>% bind_rows(., poly_na)
} else {
data <- df
}
# Drop San Andres
data <- data[data$nvl_value != 88,]
# map_cont1 <- c("#C5DCFF", "#A1B8DC", "#7E96B8", "#5D7495", "#3D5574")
# map_cont2 <- c("#74AC54", "#3AA367", "#00977B", "#00898B", "#007A94", "#006993")
# map_cont3 <- c("#FAECEC", "#D7C6CC", "#B0A3AF", "#878293", "#5B6477", "#2F4858")
# Map: first and last year
graph <- ggplot(data = data) +
geom_sf(aes(fill = q_value), color = "#2b2b2b", size = 0.1, alpha = 0.7) +
geom_text(aes(X, Y, label = nvl_label), vjust = 1.5, color = "black",
position = position_dodge(0.9), size = map_text) +
scale_fill_manual(values =  rep(col_palette, 40), na.value = "#ededed", na.translate = F) +
guides(fill = guide_legend(ncol = 6)) +
xlab("") +
labs(title = tl, caption=cap) +
theme_Publication() +
facet_grid(~time)
# Grafica
plot(graph)
return(graph)
}
}
pulso_static(220, "print")
pulso_map_change(300, "print")
# load("data/deflactor.rda")
# id <- "234"
# type_p <- "print"
# pulso_map_change(id = id, type_p = "print")
# path <- "C:/Users/anapi/Desktop"
# w <- 7*1.5
# h <- 4*1.5
# dpi <- 300
# ggsave(glue("{path}/test.png"), dpi = dpi, width = w, height = h)
# options(scipen = 99)
pulso_map_change <- function(id, type_p, col_palette){
require(sf)
require(glue)
require(colorspace)
require(stringr)
require(stringi)
require(tidyverse)
options(scipen = 999)
# Font sizes
caption_text <- 6*1.5
sub_text <- 6*1.5
theme_size <- 11
text_size <- 11*1.5
map_text <- 1.5
#### Choose variable
df <- ds_pulso[ds_pulso$var_id == id,]
# We dont have data for 2020 in GEIH income
geih <- ds_pulso %>%
dplyr::filter(id_data == 1 & str_detect(variable, "ing")) %>%
dplyr::select(variable) %>% distinct()
df$value[df$value == 0 & df$time == 2020 & df$id_data == 1 & df$variable %in% geih$variable] <- NA
# Check territorial division
if(str_detect("dpto", unique(df$id_nivel), negate = T)){
print("No se recomienda esta funcion: Datos no estan a nivel departamental")
} else {
## If missing
if(missing(type_p)) {
type_p=""
}
## If palette is missing, use default colors
if(missing(col_palette)){
col_palette <- c("#FAECEC", "#D7C6CC", "#B0A3AF", "#878293", "#5B6477", "#2F4858")
}
# Identify first and last year in data
min_year <- min(df$time)
max_year <- max(df$time)
### Filter only first and last years and calculate % change
df <- df %>%
dplyr::filter(time == min_year | time == max_year) %>%
arrange(nvl_value, time) %>%
group_by(nvl_value) %>%
mutate(value_old = value, value = 100*((value - dplyr::lag(value))/(dplyr::lag(value)))) %>%
ungroup() %>%
drop_na(value)
#### Check the elegibles
level <- unique(df$id_nivel)
no_ele <- ifelse(level %in% c("nacional","region","zona","area_metropolitana", "ciudad"), 1, 0)
### Nivel (minorities, gender, economic sector)
no_level <- ifelse(level %in% c("nacional","region","zona","area_metropolitana", "dpto", "ciudad"), 1, 0)
levels <- ifelse(level %in% c("dpto_etnia","dpto_gen","dpto_sector","nacional_etnia", "ciudad_etnia"), 1, 0)
### -----------------
### Fix labels
## ------------------
cod_vars <- cod_vars %>% ungroup() %>% select(-c( "var_id"))
df <- df %>% dplyr::left_join(cod_vars, by = c("id_data", "variable", "id_nivel")) %>%
distinct()
### Fix inflation in nominal variables
deflactor <- deflactor %>% dplyr::filter(time %in% df$time)
df <- df %>%
left_join(deflactor, by = "time") %>%
mutate(value = ifelse(var_unidad == "Pesos", value/deflactor_pib, value))
# Income and production to millions
df$value[df$var_unidad == "Pesos"] <- df$value/1000000
df$var_unidad[df$var_unidad == "Pesos"] <- "Millones de pesos (2015=100)"
tl <- ifelse(type_p=="print", unique(df$var_etiqueta),"")
s_tl <- ifelse(type_p=="print", paste0("Fuente: ",unique(df$db_nombre)),"")
cap <- ifelse(type_p=="print", paste0("Nota: ",unique(df$var_descripcion), ". ",
"Cambio porcentual entre ", min_year, "-", max_year), "")
print(tl)
tl <- str_wrap(tl, width = 30)
s_tl <- str_wrap(s_tl,width = 50)
cap <- str_wrap(cap,width = 100)
df$value_label <- stringr::str_wrap(df$var_unidad,width = 30)
### -----------------
# Fix levels
### ---------------
# Check if data has any gender/minority/other level and fix labels
if (levels==1) {
df <- df %>% dplyr::mutate(t=nvl_value) %>%
### Extract data
dplyr::mutate(nvl_value=sub("xxx.*", "",str_replace(t,"_"," xxx ")),
level=sub(".*xxx", "",str_replace(id_nivel,"_"," xxx ")),
level_value=as.numeric(sub(".*xxx", "",str_replace(t,"_"," xxx ")))) %>%
## Limpieza
dplyr::mutate(level=str_replace_all(level, " ", ""),
nvl_value=as.numeric(str_replace_all(nvl_value, " ", "")))
### Sexo y minorias etnicas
if(unique(df$level) == "gen") {
df$level_value <- factor(df$level_value,levels=c(1,2),labels = c("Hombre","Mujer"))
}
if(unique(df$level) == "etnia") {
df$level_value <- factor(df$level_value,levels=c(1,2),labels = c("Minoría","No minoría"))
}
if((unique(df$level) != "etnia") & (unique(df$level) != "gen")) {
df$level_value <- as.factor(df$level_value)
}
}
### -----------------
# Fix levels - Territory
### ---------------
# Join data with territorial shapefile
if(unique(df$id_nivel) %in% c("dpto","dpto_etnia","dpto_gen","dpto_sector")) {
df$nvl_value <- as.numeric(df$nvl_value)
map_dptos <- map_dptos %>% dplyr::rename(nvl_value = nivel_value)
df <- map_dptos %>%
dplyr::left_join(df %>% subset(time == min_year | time == max_year), by = "nvl_value") %>%
dplyr::select(-c(id_nivel.y)) %>%
dplyr::rename(id_nivel = id_nivel.x)
}
### -------------------
# Temas por default
### -------------------
s <- 1.2
a_line <- 0.6
theme_Publication <- function(base_size = theme_size, base_family="helvetica") {
theme(plot.title = element_text(face = "bold", size = rel(2), hjust = 0.5),
text=element_text(face = "bold", size = text_size, hjust = 0.5),
panel.background = element_blank(),
plot.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_blank(),
axis.title.x = element_text(vjust = -0.2, colour = "black"),
axis.text = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
# panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = margin(0, 0, 0, 0, unit = "cm"),
legend.title = element_blank(),
plot.margin=unit(c(10,5,5,5),"mm"),
### Subtitle
plot.subtitle=element_text(size = sub_text, hjust=0.5, face="italic", color="#8B8B8B"),
### Caption
plot.caption=element_text(size = caption_text, hjust=0.5, face="italic", color="#8B8B8B"),
strip.background=element_rect(colour="#FAECEC",fill="#FAECEC"),
strip.text = element_text(face="bold"))
}
### --------------
# levels
### -------------
vari <- unique(na.omit(df$variable))
df$nvl_label <- str_replace_all(df$nvl_label,vari, " ")
df$nvl_label <- str_replace_all(df$nvl_label, "[[:punct:]]", " ")
### --------------
# Progress
### -------------
print(glue("Graficando {unique(df$var_etiqueta)[1]} - Mapas cambio %"))
### --------------
# Percentiles
### -------------
# Split data in percentiles
classes <- 5
q1 <- quantile(df$value, na.rm=T, probs = seq(0, 1, length.out = classes + 1))
df$q_value <- cut(df$value, breaks = q1, include.lowest = T, dig.lab = 3)
table(df$q_value)
# Keep labels only for polygons with data
df$nvl_label[is.na(df$value)] <- NA
### --------------
# Map
### -------------
# Drop San Andres
df <- df[df$nvl_value != 88,]
# Map: first and last year
graph <- ggplot(data = df) +
geom_sf(aes(fill = q_value), color = "#2b2b2b", size = 0.1, alpha = 0.7) +
geom_text(aes(X, Y, label = nvl_label), vjust = 1.5, color = "black",
position = position_dodge(0.9), size = map_text) +
scale_fill_manual(values =  rep(col_palette, 40), na.value = "#ededed", na.translate = F) +
guides(fill = guide_legend(ncol = 6)) +
xlab("") +
labs(title = glue("{tl} (cambio porcentual)"), caption=cap) +
theme_Publication()
# Grafica
plot(graph)
return(graph)
}
}
pulso_map_change(300, "print")
pulso_scatter_time(300,"print")
pulso_scatter_time(46,"print")
pulso_scatter(46,"print")
library(PulsoSocialColombia)
pulso_scatter(46,"print")
library(PulsoSocialColombia)
pulso_scatter(46,"print")
pulso_map(300,"print")
pulso_map_change(300,"print")
pulso_scatter_time(300,"print")
pulso_static(300,"print")
pulso_trend(300,"print")
?pulso_diccionario
hello()
?hello
?hello
?hello
?hello
?hello
?hello
?hello
?hello
?hello
library(PulsoSocialColombia)
?hello
devtools::load_all()
devtools::document()
devtools::install()
library(PulsoSocialColombia)
?pulso_diccionario
library(PulsoSocialColombia)
?pulso_diccionario
?pulso_diccionario
